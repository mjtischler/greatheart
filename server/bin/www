'use strict';

// Module dependencies.
const debug = require('debug')('react-backend:server');
const cluster = require('cluster');
const app = require('../app');
const http = require('http');
const server = http.createServer(app);
const ghLogger = require('../config/ghLogger');

// Normalize a port into a number, string, or false.
function normalizePort (val) {
  const normalizedPort = parseInt(val, 10);

  if (isNaN(normalizedPort)) {
    // named pipe
    return val;
  }

  if (normalizedPort >= 0) {
    // port number
    return normalizedPort;
  }
  return false;
}

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '3001');

// Event listener for HTTP server "listening" event.
function onListening () {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe + ${addr}` : `port ${addr.port}`;
  debug(`Listening on + ${bind}`);
}

// Event listener for HTTP server "error" event.
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      ghLogger.error(`${bind} requires elevated privileges`);
      throw new Error(`${bind} requires elevated privileges`);
    case 'EADDRINUSE':
      ghLogger.error(`${bind} is already in use`);
      throw new Error(`${bind} is already in use`);
    default:
      throw error;
  }
}

if (cluster.isMaster) {
  const workerCount = require('os').cpus().length;

  ghLogger.info(`Master cluster ${process.pid} is running and setting up ${workerCount} workers...`);

  for (let i = 0; i < workerCount; i++) {
    cluster.fork();
  }

  cluster.on('online', worker => {
    ghLogger.info(`Worker ${worker.process.pid} is online`);
  });

  cluster.on('exit', (worker, code, signal) => {
    ghLogger.info(`Worker ${worker.process.pid} died with code: ${code} and signal: ${signal}`);
    ghLogger.info('Starting a new worker');
    cluster.fork();
  });
} else {
  // Listen on provided port, on all network interfaces.
  server.listen(port, () => {
    ghLogger.info(`Process ${process.pid} is listening to all incoming requests`);
  });

  server.on('error', onError);
  server.on('listening', onListening);
}
