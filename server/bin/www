#!/usr/bin/env node
'use strict';

// Module dependencies.
const app = require('../app');
const debug = require('debug')('react-backend:server');
const http = require('http');

// Create HTTP server.
const server = http.createServer(app);

// Normalize a port into a number, string, or false.
function normalizePort (val) {
  const normalizedPort = parseInt(val, 10);

  if (isNaN(normalizedPort)) {
    // named pipe
    return val;
  }

  if (normalizedPort >= 0) {
    // port number
    return normalizedPort;
  }

  return false;
}

// Event listener for HTTP server "listening" event.
function onListening () {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe + ${addr}` : `port ${addr.port}`;
  debug(`Listening on + ${bind}`);
}

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

// Event listener for HTTP server "error" event.
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      throw new Error(`${bind} requires elevated privileges`);
    case 'EADDRINUSE':
      throw new Error(`${bind} is already in use`);
    default:
      throw error;
  }
}

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
